class Solution {
    
    boolean checkConstraint(char board[][], int row, int col, int num){
        char c=(char)(num+'0');
        for(int i=0;i<=8;i++){
            if(board[row][i]==c){
                return false;
            }
        }
        for(int i=0;i<=8;i++){
            if(board[i][col]==c){
                return false;
            }
        }
        
        int x=row-row%3;
        int y=col-col%3;
        
        for(int i=x;i<x+3;i++){
            for(int j=y;j<y+3;j++){
                if(board[i][j]==c){
                    return false;
                }
            }
        }
        return true;
    }
   boolean solver(char [][]board, int row, int col){
       
       if(row==9 && col==8){
           return true;
       }
       if(row==9){
           row=0;
           col=col+1;
       }
       
        if(board[row][col]!='.'){
            return solver(board, row+1, col);
        }
        else{
            for(int i=1;i<=9;i++){
                if(checkConstraint(board, row , col, i)){
                    board[row][col]=(char)(i+'0');
                    
                    if(solver(board, row+1, col)){
                        return true;
                    }
                    else{
                        board[row][col]='.';
                    }
                }
            }
            return false;
        }
    }
    
    public void solveSudoku(char[][] board) {
        
        solver(board, 0,0);
    }
}
