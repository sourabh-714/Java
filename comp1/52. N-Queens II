class Solution {
    
    
    boolean checkConstraints(int [][]matrix, int row, int col){
        for(int i=0;i<=row;i++){
            if(matrix[i][col]==1)return false;
            
        }
        
        
        for(int i=row,j=col; i>=0 && j>=0 ; i--,j--){
            if(matrix[i][j]==1){
                return false;
            }
        }
        for(int i=row, j=col; i>=0 && j<matrix.length;i--,j++){
            if(matrix[i][j]==1){
                return false;
            }
        }
        return true;
    }
    int fillQueen(int matrix[][], int row , int totalWays){
        
        if(row==matrix.length){
           return  totalWays+1;
        }
        for(int i=0;i<matrix.length; i++){
            if(checkConstraints(matrix, row, i)==true){
                matrix[row][i]=1;
                totalWays=fillQueen(matrix, row+1, totalWays);
                matrix[row][i]=0;
                
            }
        }
        return totalWays;
        
    }
    
    public int totalNQueens(int n) {
        
        int matrix[][]=new int [n][n];
        
       return fillQueen(matrix, 0, 0);
        
        
    }
}
