package backtracking;

public class nQueen {

    static boolean checkConstraint(int row , int col, int grid[][]){

        //col
        for(int i=0;i<=row;i++){
            if(grid[i][col]==1){
                    return false;
            }
        }
        //diag ;left
        for(int i=row, j=col; i>=0 && j>=0 ;i--,j--){
            if(grid[i][j]==1)return false;
        }
        //right
        for(int i=row, j=col; i>=0 && j<grid[0].length;i--,j++){
            if(grid[i][j]==1){
                return false;
            }
        }

        return true;
    }
    static boolean fillQueen(int grid[][], int row){

        if(row==4){
            return true;
        }

        for(int i=0;i<grid[row].length;i++){

            if(checkConstraint(row, i, grid)){
                grid[row][i]=1;

                if(fillQueen(grid, row+1)==false){
                    grid[row][i]=0;
                }
                else{
                    return true;
                }
            }
        }
        return false;
    }
    public static void main(String[] args) {
        int grid[][]=new int[4][4];


        fillQueen(grid, 0);

        for(int i=0;i<4;i++){
            for(int j=0;j<4;j++){
                System.out.print(grid[i][j]+"  ");
            }
            System.out.println();
        }


    }
}
